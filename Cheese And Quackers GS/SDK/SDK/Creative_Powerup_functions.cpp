#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: Creative_Powerup

#include "Basic.hpp"

#include "Creative_Powerup_classes.hpp"
#include "Creative_Powerup_parameters.hpp"


namespace SDK
{

// Function Creative_Powerup.Creative_Powerup_C.ExecuteUbergraph_Creative_Powerup
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACreative_Powerup_C::ExecuteUbergraph_Creative_Powerup(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "ExecuteUbergraph_Creative_Powerup");

	Params::Creative_Powerup_C_ExecuteUbergraph_Creative_Powerup Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_Powerup.Creative_Powerup_C.Play Ambient Loop Sound
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACreative_Powerup_C::Play_Ambient_Loop_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "Play Ambient Loop Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.Play Pick Up Sound
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACreative_Powerup_C::Play_Pick_Up_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "Play Pick Up Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.ResetPlayCollectionFXGate
// (BlueprintCallable, BlueprintEvent)

void ACreative_Powerup_C::ResetPlayCollectionFXGate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "ResetPlayCollectionFXGate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.PlayCollectionFX
// (BlueprintCallable, BlueprintEvent)

void ACreative_Powerup_C::PlayCollectionFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "PlayCollectionFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.BndEvt__StaticMeshComponent_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ACreative_Powerup_C::BndEvt__StaticMeshComponent_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "BndEvt__StaticMeshComponent_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature");

	Params::Creative_Powerup_C_BndEvt__StaticMeshComponent_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_Powerup.Creative_Powerup_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ACreative_Powerup_C::BndEvt__Sphere_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "BndEvt__Sphere_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");

	Params::Creative_Powerup_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_Powerup.Creative_Powerup_C.BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_6_SimpleDynamicMulticastDelegate__DelegateSignature
// (BlueprintEvent)

void ACreative_Powerup_C::BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_6_SimpleDynamicMulticastDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_6_SimpleDynamicMulticastDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_3_SimpleDynamicMulticastDelegate__DelegateSignature
// (BlueprintEvent)

void ACreative_Powerup_C::BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_3_SimpleDynamicMulticastDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_3_SimpleDynamicMulticastDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ACreative_Powerup_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_2_AnyPropertyChangedDelegate__DelegateSignature
// (BlueprintEvent)

void ACreative_Powerup_C::BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_2_AnyPropertyChangedDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_2_AnyPropertyChangedDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_1_AnyPropertyChangedDelegate__DelegateSignature
// (BlueprintEvent)

void ACreative_Powerup_C::BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_1_AnyPropertyChangedDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_1_AnyPropertyChangedDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_0_OnMinigameStateChanged__DelegateSignature
// (BlueprintEvent)
// Parameters:
// EFortMinigameState                      NewMinigameState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACreative_Powerup_C::BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_0_OnMinigameStateChanged__DelegateSignature(EFortMinigameState NewMinigameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_0_OnMinigameStateChanged__DelegateSignature");

	Params::Creative_Powerup_C_BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_0_OnMinigameStateChanged__DelegateSignature Parms{};

	Parms.NewMinigameState = NewMinigameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_Powerup.Creative_Powerup_C.SetupEffectData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayEffectSpecHandle& EffectHandle                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FGameplayEffectSpecHandle*       OutEffectHandle                                        (Parm, OutParm)

void ACreative_Powerup_C::SetupEffectData(const struct FGameplayEffectSpecHandle& EffectHandle, struct FGameplayEffectSpecHandle* OutEffectHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "SetupEffectData");

	Params::Creative_Powerup_C_SetupEffectData Parms{};

	Parms.EffectHandle = std::move(EffectHandle);

	UObject::ProcessEvent(Func, &Parms);

	if (OutEffectHandle != nullptr)
		*OutEffectHandle = std::move(Parms.OutEffectHandle);
}


// Function Creative_Powerup.Creative_Powerup_C.UpdateForPropertyChange
// (Public, BlueprintCallable, BlueprintEvent)

void ACreative_Powerup_C::UpdateForPropertyChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "UpdateForPropertyChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.UpdateForMinigameState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortMinigameState                      MinigameState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACreative_Powerup_C::UpdateForMinigameState(EFortMinigameState MinigameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "UpdateForMinigameState");

	Params::Creative_Powerup_C_UpdateForMinigameState Parms{};

	Parms.MinigameState = MinigameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_Powerup.Creative_Powerup_C.PassesTeamCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Passed_Team_Check                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACreative_Powerup_C::PassesTeamCheck(class AActor* Actor, bool* Passed_Team_Check)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "PassesTeamCheck");

	Params::Creative_Powerup_C_PassesTeamCheck Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Passed_Team_Check != nullptr)
		*Passed_Team_Check = Parms.Passed_Team_Check;
}


// Function Creative_Powerup.Creative_Powerup_C.OnRep_IsPowerupCollectible
// (BlueprintCallable, BlueprintEvent)

void ACreative_Powerup_C::OnRep_IsPowerupCollectible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "OnRep_IsPowerupCollectible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.SetIsPowerupCollectible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCollectible                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACreative_Powerup_C::SetIsPowerupCollectible(bool IsCollectible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "SetIsPowerupCollectible");

	Params::Creative_Powerup_C_SetIsPowerupCollectible Parms{};

	Parms.IsCollectible = IsCollectible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_Powerup.Creative_Powerup_C.ResetPowerupCollectible_TimerDelegate
// (Public, BlueprintCallable, BlueprintEvent)

void ACreative_Powerup_C::ResetPowerupCollectible_TimerDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "ResetPowerupCollectible_TimerDelegate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Creative_Powerup.Creative_Powerup_C.DoPickup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACreative_Powerup_C::DoPickup(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "DoPickup");

	Params::Creative_Powerup_C_DoPickup Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Creative_Powerup.Creative_Powerup_C.UpdateSphereCollision
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortMinigameState                      MinigameState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACreative_Powerup_C::UpdateSphereCollision(EFortMinigameState MinigameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Creative_Powerup_C", "UpdateSphereCollision");

	Params::Creative_Powerup_C_UpdateSphereCollision Parms{};

	Parms.MinigameState = MinigameState;

	UObject::ProcessEvent(Func, &Parms);
}

}

